# module for hard coding snid lists to make human-vetted cuts implementable
import numpy as np
import pandas as pd

def GW19084_1001_not_artifact():
    df = pd.read_csv('../events/GW190814_1001/snid_lists/GW190814_vetting.csv', comment='#')
    snids = np.array(df['SNID'], dtype=int)
    bad_sub = np.array(df['Bad Sub'].values, dtype=int)
    masked = np.array(df['Overmasked'].values, dtype=int)
    psf = np.array(df['PSF in temp'].values, dtype=int)
    missing = np.array(df['Missing'].values, dtype=int)
    artifacts = (bad_sub == 1) | (masked == 1) | (psf == 1) | (missing == 1)
    return snids[artifacts] #return bad snids

def GW19084_1001_not_artifact_strict():
    df = pd.read_csv('../events/GW190814_1001/snid_lists/GW190814_vetting.csv', comment='#')
    snids = np.array(df['SNID'], dtype=int)
    bad_sub = np.array(df['Bad Sub'].values, dtype=int)
    masked = np.array(df['Overmasked'].values, dtype=int)
    psf = np.array(df['PSF in temp'].values, dtype=int)
    missing = np.array(df['Missing'].values, dtype=int)
    marginal = np.array(df['Marginal at best'].values, dtype=int)
    artifacts = (bad_sub == 1) | (masked == 1) | (psf == 1) | (missing == 1) | (marginal == 1) 
    return snids[artifacts]

def GW190814_1001_near_foreground():
    df = pd.read_csv('../events/GW190814_1001/snid_lists/not_near_foreground.txt', header=None, names=['SNID'])
    snids = np.array(df['SNID'], dtype=int)
    return snids

def GW190814_1001_near_galaxy_center():
    df = pd.read_csv('../events/GW190814_1001/snid_lists/not_near_galaxy_center.txt', header=None, names=['SNID'])
    snids = np.array(df['SNID'], dtype=int)
    return snids

def not_in_gaia_1_arcsec_GW190814_1001_snids():
    df = pd.read_csv('../events/GW190814_1001/snid_lists/not_gaia_2_arcsec.txt', header=None, names=['SNID'])
    snids = np.array(df['SNID'], dtype=int)
    return snids

def GW190814_1001_DES_galaxy():
    df = pd.read_csv('../events/GW190814_1001/snid_lists/not_DES_galaxy.txt', header=None, names=['SNID'])
    snids = np.array(df['SNID'], dtype=int)
    return snids

def GW190814_1001_DES_star():
    df = pd.read_csv('../events/GW190814_1001/snid_lists/not_DES_star.txt', header=None, names=['SNID'])
    snids = np.array(df['SNID'], dtype=int)
    return snids

def GW190814_1001_DES_object():
    df = pd.read_csv('../events/GW190814_1001/snid_lists/not_DES_object.txt', header=None, names=['SNID'])
    snids = np.array(df['SNID'], dtype=int)
    return snids

def GW190814_1001_near_bright_things():
    #not closer than: $20\arcmin$ to the Sculptor Galaxy, $8\arcmin$ to NGC288, $3\arcmin$ to HD4398
    df = pd.read_csv('../events/GW190814_1001/snid_lists/not_near_bright_things.txt', header=None, names=['SNID'])
    snids = np.array(df['SNID'], dtype=int)
    return snids


def GW190814_1001_visual_inspection():
    #l = [635566, 625633, 635380, 625878, 625839, 626956, 664936, 631484, 625263,
    #     627337, 627577, 627249, 625673, 627832, 625985, 663323, 627394, 624252,
    #     661833, 627288, 625030, 626718, 659801, 631360, 626761, 628025, 624157,
    #     614750, 660289, 626722, 624690, 628966, 614827, 626209, 635347, 625381]

    #additional snids
    #l += [671111, 666914, 668442, 661188, 670178, 632892, 628631, 659780, 660284,
    #      663735, 661618, 670016, 665573, 667752, 633118, 667752, 633118, 667525,
    #      667764, 634604, 665913, 659395, 626606, 633239, 659340, 625152, 631833,
    #      659132]

    df = pd.read_csv('../events/GW190814_1001/snid_lists/good_nice_faint.txt', header=None, names=['SNID'])
    snids = np.array(df['SNID'], dtype=int)
    return snids


def GW190814_1001_448():
    l = [660289.0,
624157.0,
614750.0,
625069.0,
625070.0,
626717.0,
626722.0,
634870.0,
634871.0,
635555.0,
635689.0,
628970.0,
625120.0,
634876.0,
623478.0,
627760.0,
624143.0,
629175.0,
634808.0,
631132.0,
634814.0,
626667.0,
633462.0,
634833.0,
630752.0,
629647.0,
630403.0,
662662.0,
658943.0,
624690.0,
614787.0,
625071.0,
625058.0,
625707.0,
631747.0,
628966.0,
628502.0,
628294.0,
627054.0,
633807.0,
630800.0,
623902.0,
614827.0,
635540.0,
626513.0,
628696.0,
624552.0,
632096.0,
626347.0,
630548.0,
626209.0,
625846.0,
628781.0,
628508.0,
625154.0,
631097.0,
634895.0,
625228.0,
625273.0,
628176.0,
625417.0,
627792.0,
624572.0,
614840.0,
628027.0,
628620.0,
625524.0,
628033.0,
633092.0,
628579.0,
625959.0,
634608.0,
628507.0,
626647.0,
625119.0,
635205.0,
635347.0,
625964.0,
635964.0,
631751.0,
632105.0,
629721.0,
628528.0,
629815.0,
628511.0,
626764.0,
627167.0,
624826.0,
630184.0,
629738.0,
630799.0,
631599.0,
628166.0,
625862.0,
635835.0,
624824.0,
635855.0,
626300.0,
629414.0,
624118.0,
632915.0,
625439.0,
631004.0,
635225.0,
669253.0,
631244.0,
627917.0,
626413.0,
627260.0,
635226.0,
630429.0,
632258.0,
634114.0,
627619.0,
623754.0,
623954.0,
628141.0,
624708.0,
630814.0,
633285.0,
628717.0,
634181.0,
628557.0,
630717.0,
625287.0,
625231.0,
633274.0,
630904.0,
635914.0,
633555.0,
626737.0,
635061.0,
631023.0,
625189.0,
624466.0,
625296.0,
625636.0,
628010.0,
625500.0,
625381.0,
625591.0,
631271.0,
625898.0,
659997.0,
628380.0,
635488.0,
634729.0,
628506.0,
630798.0,
663725.0,
624483.0,
662469.0,
623787.0,
632150.0,
631413.0,
635753.0,
624752.0,
626537.0,
625900.0,
625571.0,
628727.0,
626100.0,
635852.0,
626796.0,
634803.0,
635949.0,
628043.0,
625828.0,
633584.0,
624088.0,
631235.0,
634836.0,
625113.0,
632985.0,
669739.0,
628037.0,
634985.0,
624870.0,
634576.0,
624374.0,
634725.0,
663890.0,
625967.0,
627492.0,
635165.0,
631431.0,
625208.0,
635642.0,
614808.0,
628337.0,
629997.0,
627032.0,
635221.0,
635895.0,
635011.0,
626635.0,
629123.0,
635296.0,
624257.0,
628578.0,
629149.0,
628851.0,
671804.0,
624791.0,
624832.0,
635227.0,
632083.0,
663219.0,
630709.0,
634747.0,
625603.0,
627250.0,
628446.0,
635062.0,
635524.0,
624477.0,
624101.0,
634571.0,
630242.0,
624949.0,
627008.0,
668662.0,
628168.0,
629320.0,
628893.0,
627489.0,
624571.0,
635593.0,
634897.0,
635796.0,
628353.0,
663832.0,
624664.0,
629766.0,
625064.0,
625126.0,
635196.0,
625899.0,
633418.0,
623980.0,
626310.0,
632490.0,
624609.0,
635407.0,
625135.0,
633420.0,
625184.0,
625026.0,
628277.0,
624518.0,
628299.0,
628548.0,
630721.0,
631628.0,
626470.0,
630590.0,
626573.0,
629035.0,
625557.0,
624082.0,
625908.0,
625007.0,
627084.0,
635119.0,
624689.0,
626269.0,
627611.0,
626603.0,
631453.0,
625827.0,
625743.0,
627296.0,
630020.0,
625334.0,
629347.0,
626293.0,
625130.0,
626219.0,
629310.0,
614780.0,
624766.0,
624478.0,
624178.0,
629839.0,
627863.0,
624837.0,
635402.0,
625330.0,
630440.0,
630670.0,
625046.0,
626604.0,
672125.0,
631575.0,
614791.0,
635026.0,
630327.0,
673854.0,
629409.0,
626678.0,
625680.0,
626705.0,
627769.0,
631874.0,
626524.0,
627270.0,
635643.0,
626464.0,
626942.0,
627842.0,
658893.0,
627413.0,
633586.0,
625244.0,
628257.0,
633145.0,
624630.0,
626472.0,
624074.0,
628447.0,
673864.0,
626520.0,
626047.0,
626324.0,
632885.0,
624020.0,
625731.0,
635313.0,
629313.0,
659405.0,
627346.0,
624640.0,
629307.0,
625067.0,
626233.0,
627199.0,
631912.0,
625642.0,
629334.0,
614809.0,
634875.0,
628449.0,
627674.0,
626139.0,
626204.0,
627907.0,
663067.0,
626563.0,
626628.0,
628240.0,
626026.0,
626715.0,
626200.0,
625831.0,
625481.0,
627950.0,
626683.0,
635654.0,
633825.0,
623924.0,
631642.0,
625180.0,
624535.0,
628641.0,
614769.0,
623929.0,
626713.0,
625747.0,
635697.0,
660282.0,
633204.0,
634911.0,
625074.0,
627081.0,
627624.0,
625237.0,
635001.0,
628464.0,
614741.0,
624599.0,
624544.0,
624294.0,
629397.0,
630254.0,
627585.0,
624657.0,
624718.0,
625679.0,
627155.0,
626539.0,
629292.0,
630075.0,
632793.0,
662479.0,
635566.0,
625633.0,
635380.0,
625878.0,
625839.0,
626956.0,
664936.0,
631484.0,
625263.0,
627337.0,
627577.0,
627249.0,
625673.0,
627832.0,
625985.0,
663323.0,
627394.0,
624252.0,
661833.0,
627288.0,
625030.0,
626718.0,
659801.0,
631360.0,
626761.0,
628025.0,
674747.0,
631855.0,
635126.0,
635553.0,
614764.0,
614773.0,
614796.0,
624819.0,
624920.0,
624987.0,
626632.0,
626870.0,
627062.0,
627068.0,
627977.0,
628030.0,
628721.0,
629067.0,
629691.0,
629918.0,
630297.0,
630418.0,
630845.0,
631529.0,
632467.0,
632481.0,
634448.0,
635195.0]

    return [int(x) for x in l]

